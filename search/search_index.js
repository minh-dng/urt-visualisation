var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"URT Visualisation","text":"<p>This documentation contains the Python and MATLAB package standardising the visualisation within the USYD Rocketry Team.</p> <p>MATLAB is currently in the works.</p>"},{"location":"colour.html","title":"Colour","text":"<p>TODO: Cite the colours</p>"},{"location":"python/colour.html","title":"Colour","text":"<p>TODO</p> <p>Include colour palette with transparent background.</p> <p>Enum of singular colours and colour schemes</p>"},{"location":"python/colour.html#vis.colour.Colour","title":"<code>Colour</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"python/colour.html#vis.colour.Colour.AccentBlue","title":"<code>AccentBlue = '#0148A4'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.AccentGrey","title":"<code>AccentGrey = '#F1F1F1'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.AccentYellow","title":"<code>AccentYellow = '#FFB800'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.MasterbrandBlack","title":"<code>MasterbrandBlack = '#0A0A0A'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.MasterbrandCharcoal","title":"<code>MasterbrandCharcoal = '#424242'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.MasterbrandOchre","title":"<code>MasterbrandOchre = '#E64626'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.MasterbrandWhite","title":"<code>MasterbrandWhite = '#FFFFFF'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryBeige","title":"<code>SecondaryBeige = '#FDCA90'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryBlue","title":"<code>SecondaryBlue = '#4E98D3'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryDarkGreen","title":"<code>SecondaryDarkGreen = '#007E3B'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryDarkSeafoam","title":"<code>SecondaryDarkSeafoam = '#00A485'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryIvory","title":"<code>SecondaryIvory = '#F8EFDD'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryLemon","title":"<code>SecondaryLemon = '#FBF38D'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryLightBlue","title":"<code>SecondaryLightBlue = '#91BDE5'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryLightGreen","title":"<code>SecondaryLightGreen = '#BDDC96'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryLightPink","title":"<code>SecondaryLightPink = '#F8B9CC'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryLightSeafoam","title":"<code>SecondaryLightSeafoam = '#68C6B6'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryLilac","title":"<code>SecondaryLilac = '#B896C6'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryMaroon","title":"<code>SecondaryMaroon = '#7A2000'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryOrange","title":"<code>SecondaryOrange = '#F9A134'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryPeach","title":"<code>SecondaryPeach = '#F79C72'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryPink","title":"<code>SecondaryPink = '#D6519D'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.SecondaryPurple","title":"<code>SecondaryPurple = '#7F3F98'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowRed","title":"<code>RainbowRed = '#D81E31'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowDarkBlue","title":"<code>RainbowDarkBlue = '#1B639D'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowBlack","title":"<code>RainbowBlack = '#000000'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowGreen","title":"<code>RainbowGreen = '#008000'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowLightBlue","title":"<code>RainbowLightBlue = '#02A9E2'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowYellow","title":"<code>RainbowYellow = '#FBC20D'</code>","text":""},{"location":"python/colour.html#vis.colour.Colour.RainbowGrey","title":"<code>RainbowGrey = '#595959'</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme","title":"<code>ColourScheme</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Colour schemes for visualisation. Format: Key | Number of colours</p> <p>https://github.com/Sydney-Informatics-Hub/usydColours &amp; Rainbow is from GraphGood.m</p>"},{"location":"python/colour.html#vis.colour.ColourScheme.Rainbow","title":"<code>Rainbow = (Colour.RainbowRed.value, Colour.RainbowDarkBlue.value, Colour.RainbowBlack.value, Colour.RainbowGreen.value, Colour.RainbowLightBlue.value, Colour.RainbowYellow.value, Colour.RainbowGrey.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Primary","title":"<code>Primary = (Colour.MasterbrandCharcoal.value, Colour.MasterbrandOchre.value, Colour.AccentBlue.value, Colour.AccentYellow.value, Colour.AccentGrey.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Extended","title":"<code>Extended = (Colour.MasterbrandCharcoal.value, Colour.MasterbrandOchre.value, Colour.AccentBlue.value, Colour.AccentYellow.value, Colour.SecondaryDarkGreen.value, Colour.SecondaryBlue.value, Colour.SecondaryPeach.value, Colour.SecondaryBeige.value, Colour.SecondaryLemon.value, Colour.SecondaryLightGreen.value, Colour.SecondaryDarkSeafoam.value, Colour.SecondaryLightSeafoam.value, Colour.SecondaryLightBlue.value, Colour.SecondaryLilac.value, Colour.SecondaryPurple.value, Colour.SecondaryPink.value, Colour.SecondaryLightPink.value, Colour.SecondaryOrange.value, Colour.SecondaryMaroon.value, Colour.MasterbrandBlack.value, Colour.AccentGrey.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Secondary","title":"<code>Secondary = (Colour.MasterbrandOchre.value, Colour.SecondaryBlue.value, Colour.AccentYellow.value, Colour.SecondaryDarkSeafoam.value, Colour.SecondaryLilac.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Pastel","title":"<code>Pastel = (Colour.SecondaryLemon.value, Colour.SecondaryPeach.value, Colour.SecondaryLightPink.value, Colour.SecondaryLilac.value, Colour.SecondaryLightBlue.value, Colour.SecondaryLightSeafoam.value, Colour.SecondaryLightGreen.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Complementary_ReGr","title":"<code>Complementary_ReGr = (Colour.MasterbrandOchre.value, Colour.SecondaryPeach.value, Colour.SecondaryMaroon.value, Colour.SecondaryDarkSeafoam.value, Colour.SecondaryLightSeafoam.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Complementary_ReBl","title":"<code>Complementary_ReBl = (Colour.MasterbrandOchre.value, Colour.SecondaryPeach.value, Colour.SecondaryBeige.value, Colour.AccentBlue.value, Colour.SecondaryBlue.value, Colour.SecondaryLightBlue.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Bright","title":"<code>Bright = (Colour.MasterbrandOchre.value, Colour.SecondaryDarkGreen.value, Colour.SecondaryLightGreen.value, Colour.SecondaryLightBlue.value, Colour.SecondaryBlue.value, Colour.SecondaryOrange.value, Colour.AccentYellow.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Muted","title":"<code>Muted = (Colour.SecondaryLightBlue.value, Colour.SecondaryLemon.value, Colour.SecondaryPeach.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.TrafficLight","title":"<code>TrafficLight = (Colour.SecondaryDarkSeafoam.value, Colour.SecondaryLemon.value, Colour.MasterbrandOchre.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Heatmap","title":"<code>Heatmap = (Colour.SecondaryDarkSeafoam.value, Colour.MasterbrandWhite.value, Colour.MasterbrandOchre.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.FlameTree","title":"<code>FlameTree = (Colour.SecondaryLemon.value, Colour.SecondaryOrange.value, Colour.MasterbrandOchre.value, Colour.SecondaryMaroon.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Jacaranda","title":"<code>Jacaranda = (Colour.SecondaryLightPink.value, Colour.SecondaryLilac.value, Colour.SecondaryBlue.value, Colour.AccentBlue.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Harbour","title":"<code>Harbour = (Colour.SecondaryLightGreen.value, Colour.SecondaryLightSeafoam.value, Colour.SecondaryBlue.value, Colour.AccentBlue.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Sandstone","title":"<code>Sandstone = (Colour.SecondaryIvory.value, Colour.SecondaryBeige.value, Colour.SecondaryMaroon.value, Colour.MasterbrandCharcoal.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Ochre","title":"<code>Ochre = (Colour.SecondaryIvory.value, Colour.SecondaryBeige.value, Colour.SecondaryPeach.value, Colour.MasterbrandOchre.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.Greyscale","title":"<code>Greyscale = (Colour.MasterbrandCharcoal.value, Colour.AccentGrey.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.BlGrYe","title":"<code>BlGrYe = (Colour.AccentBlue.value, Colour.SecondaryLightGreen.value, Colour.SecondaryLemon.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.BlOr","title":"<code>BlOr = (Colour.AccentBlue.value, Colour.SecondaryOrange.value, Colour.SecondaryLemon.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.DivergingBlueRed","title":"<code>DivergingBlueRed = (Colour.SecondaryMaroon.value, Colour.MasterbrandOchre.value, Colour.SecondaryPeach.value, Colour.MasterbrandWhite.value, Colour.SecondaryLightBlue.value, Colour.SecondaryBlue.value, Colour.AccentBlue.value)</code>","text":""},{"location":"python/colour.html#vis.colour.ColourScheme.DivergingBlueOrange","title":"<code>DivergingBlueOrange = (Colour.SecondaryOrange.value, Colour.MasterbrandWhite.value, Colour.AccentBlue.value)</code>","text":""},{"location":"python/dev.html","title":"Guidelines","text":"<ul> <li>You need to build and install <code>vis</code> for the <code>mkdocs-jupyter</code> plug in to work</li> </ul> <pre><code>python -m build\npip install py/dist/vis-&lt;version&gt;-py3-none-any.whl\n</code></pre> <ul> <li>Use <code>__init__.py</code> to \"re-export\"</li> </ul>"},{"location":"python/install.html","title":"Install <code>vis</code>","text":"<p>The package will be installed as <code>vis</code></p> <pre><code>pip install git+https://github.sydney.edu.au/USYD-Rocketry-Team/visualisation.git#subdirectory=py\n</code></pre> <ul> <li>Refer to https://pip.pypa.io/en/stable/topics/vcs-support/ for more connection option to the repo.</li> </ul> requirements.txt<pre><code># ... other packages\ngit+https://github.sydney.edu.au/USYD-Rocketry-Team/visualisation.git#subdirectory=py\n</code></pre>"},{"location":"python/install.html#references","title":"References","text":"<ul> <li>For <code>requirements.txt</code> https://stackoverflow.com/a/35998253/14046889</li> </ul>"},{"location":"python/plot.html","title":"Plot","text":"<p>Base visualisation style</p> <p>Examples:</p> <pre><code>from vis import uni_plot\nfig, ax = uni_plot(x, y1, label=\"y1\")\nuni_plot(x, y2, ax=ax, label=\"y2\", xlabel=\"xlabel\", ylabel=\"ylabel\")\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.MPL_RC","title":"<code>MPL_RC: dict[str, dict[str, Any]] = {'lines': {'linewidth': 2.5, 'markersize': 3}, 'font': {'family': 'serif', 'size': 10}, 'axes': {'linewidth': 1, 'titlesize': 10, 'labelsize': 10, 'xmargin': 0, 'grid': True, 'prop_cycle': cycler(color=ColourScheme.Primary.value)}, 'grid': {'linewidth': 0.6}, 'legend': {'framealpha': 1, 'facecolor': 'FFFFFF', 'edgecolor': '000000', 'fancybox': False, 'title_fontsize': 10, 'fontsize': 'small'}}</code>  <code>module-attribute</code>","text":"<p>MatplotlibRc, refer to matplotlib.rc()</p>"},{"location":"python/plot.html#vis.visualisation.ctx","title":"<code>ctx(config=None)</code>","text":"<p>Context manager + decorator to temporarily set style parameters.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[dict[str, Any]] | None</code> <p>A dictionary where keys are Matplotlib rc parameter groups         and values are dictionaries of parameter settings.         If None, use MPL_RC.</p> <code>None</code> <p>Yields:     (None): This function is a generator that yields control back to the caller.</p> <p>Examples:</p> <pre><code>with ctx({'lines': {'linewidth': 2}, 'axes': {'labelsize': 'large'}}):\n    # Your plotting code here\n\n@ctx({'lines': {'linewidth': 2}, 'axes': {'labelsize': 'large'}})\ndef plot():\n    # Your plotting code here\n</code></pre> Source code in <code>py/vis/visualisation.py</code> <pre><code>@contextlib.contextmanager\ndef ctx(config: dict[dict[str, Any]] | None = None) -&gt; Generator[None, None, None]:\n    \"\"\"Context manager + decorator to temporarily set style parameters.\n\n    Args:\n        config: A dictionary where keys are Matplotlib rc parameter groups\n                    and values are dictionaries of parameter settings.\n                    If None, use [MPL_RC][vis.MPL_RC].\n    Yields:\n        (None): This function is a generator that yields control back to the caller.\n\n    Examples:\n        ```python\n        with ctx({'lines': {'linewidth': 2}, 'axes': {'labelsize': 'large'}}):\n            # Your plotting code here\n\n        @ctx({'lines': {'linewidth': 2}, 'axes': {'labelsize': 'large'}})\n        def plot():\n            # Your plotting code here\n        ```\n    \"\"\"\n\n    for key, value in (config or MPL_RC).items():\n        mpl.rc(key, **value)\n\n    yield\n\n    mpl.rcdefaults()\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.uni_plot","title":"<code>uni_plot(x, y, *, ax=None, label=None, xlabel=None, ylabel=None, **kwargs)</code>","text":"<p>Line plot x vs y</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Sequence[float]</code> <p>x-axis data</p> required <code>y</code> <code>Sequence[float]</code> <p>y-axis data</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot on. New figure on None</p> <code>None</code> <code>label</code> <code>str | None</code> <p>Legend label</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[Figure, Axes]</code> <p>Figure and Axes that was passed in or created</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Other keyword args for Axes.plot(). Moreover, If <code>xlab_override_warn</code>, <code>ylab_override_warn</code> are falsy, the module will not warn when <code>xlabel</code> or <code>ylabel</code> is overridden.</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>@ctx()\ndef uni_plot(\n    x: Sequence[float],\n    y: Sequence[float],\n    *,\n    ax: plt.Axes | None = None,\n    label: str | None = None,\n    xlabel: str | None = None,\n    ylabel: str | None = None,\n    **kwargs,\n) -&gt; tuple[plt.Figure, plt.Axes]:\n    \"\"\"Line plot x vs y\n\n    Args:\n        x: x-axis data\n        y: y-axis data\n        ax: Axes to plot on. New figure on None\n        label: Legend label\n\n    Returns:\n        Figure and Axes that was passed in or created\n\n    Other Args:\n        **kwargs: Other keyword args for [Axes.plot()][matplotlib.axes.Axes.plot].\n            Moreover,\n            If `xlab_override_warn`, `ylab_override_warn` are falsy,\n            the module will not warn when `xlabel` or `ylabel` is overridden.\n    \"\"\"\n    fig, ax = get_fig_ax(ax)\n\n    xlabel, ylabel = _no_override_axis_labels(ax, fig, xlabel, ylabel, kwargs)\n\n    ax.plot(x, y, label=label, **kwargs)\n    ax.set(xlabel=xlabel, ylabel=ylabel)\n\n    return fig, ax\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.uni_scatter","title":"<code>uni_scatter(x, y, *, ax=None, label=None, xlabel=None, ylabel=None, **kwargs)</code>","text":"<p>Scatter plot x vs y</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Sequence[float]</code> <p>x-axis data</p> required <code>y</code> <code>Sequence[float]</code> <p>y-axis data</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot on. New figure on None</p> <code>None</code> <code>label</code> <code>str | None</code> <p>Label for legend</p> <code>None</code> <code>xlabel</code> <code>str | None</code> <p>Label for x-axis</p> <code>None</code> <code>ylabel</code> <code>str | None</code> <p>Label for y-axis</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[Figure, Axes]</code> <p>Figure and Axes that was passed in or created</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Other keyword args for Axes.plot(). Moreover, If <code>xlab_override_warn</code>, <code>ylab_override_warn</code> are falsy, the module will not warn when <code>xlabel</code> or <code>ylabel</code> is overridden.</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>@ctx()\ndef uni_scatter(\n    x: Sequence[float],\n    y: Sequence[float],\n    *,\n    ax: plt.Axes | None = None,\n    label: str | None = None,\n    xlabel: str | None = None,\n    ylabel: str | None = None,\n    **kwargs,\n) -&gt; tuple[plt.Figure, plt.Axes]:\n    \"\"\"Scatter plot x vs y\n\n    Args:\n        x: x-axis data\n        y: y-axis data\n        ax: Axes to plot on. New figure on None\n        label: Label for legend\n        xlabel: Label for x-axis\n        ylabel: Label for y-axis\n\n    Returns:\n        Figure and Axes that was passed in or created\n\n    Other Args:\n        **kwargs: Other keyword args for [Axes.plot()][matplotlib.axes.Axes.plot].\n            Moreover,\n            If `xlab_override_warn`, `ylab_override_warn` are falsy,\n            the module will not warn when `xlabel` or `ylabel` is overridden.\n    \"\"\"\n    fig, ax = get_fig_ax(ax)\n\n    xlabel, ylabel = _no_override_axis_labels(ax, fig, xlabel, ylabel, kwargs)\n\n    ax.scatter(x, y, label=label, **kwargs)\n    ax.set(xlabel=xlabel, ylabel=ylabel)\n\n    return fig, ax\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.dual_y_axis_plot","title":"<code>dual_y_axis_plot(y_s, x, *, ax=None, xlabel=None, ylabels=(None, None), colors=(None, None), **kwargs)</code>","text":"<p>Plot 2 ys against 1 x</p> <p>Parameters:</p> Name Type Description Default <code>y_s</code> <code>tuple[Sequence[float], Sequence[float]]</code> <p>y-axis data</p> required <code>x</code> <code>Sequence[float]</code> <p>x-axis data</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot on. New figure on None</p> <code>None</code> <code>xlabel</code> <code>str | None</code> <p>Label for x-axis</p> <code>None</code> <code>ylabels</code> <code>tuple[str | None, str | None]</code> <p>Labels for y-axis</p> <code>(None, None)</code> <code>colors</code> <code>tuple[ColorType | None, ColorType | None]</code> <p>Colour of the line.</p> <code>(None, None)</code> <p>Returns:</p> Type Description <code>tuple[Figure, Axes]</code> <p>Figure and Axes that was passed in or created</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Other keyword args for Axes.plot(). Moreover, If <code>xlab_override_warn</code>, <code>ylab_override_warn</code> are falsy, the module will not warn when <code>xlabel</code> or <code>ylabel</code> is overridden.</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>@ctx()\ndef dual_y_axis_plot(\n    y_s: tuple[Sequence[float], Sequence[float]],\n    x: Sequence[float],\n    *,\n    ax: plt.Axes | None = None,\n    xlabel: str | None = None,\n    ylabels: tuple[str | None, str | None] = (None, None),\n    colors: tuple[ColorType | None, ColorType | None] = (None, None),\n    **kwargs,\n) -&gt; tuple[plt.Figure, plt.Axes]:\n    \"\"\"Plot 2 ys against 1 x\n\n    Args:\n        y_s: y-axis data\n        x: x-axis data\n        ax: Axes to plot on. New figure on None\n        xlabel: Label for x-axis\n        ylabels: Labels for y-axis\n        colors: Colour of the line.\n\n    Returns:\n        Figure and Axes that was passed in or created\n\n    Other Args:\n        **kwargs: Other keyword args for [Axes.plot()][matplotlib.axes.Axes.plot].\n            Moreover,\n            If `xlab_override_warn`, `ylab_override_warn` are falsy,\n            the module will not warn when `xlabel` or `ylabel` is overridden.\n    \"\"\"\n    fig, ax = uni_plot(\n        x, y_s[0], ax=ax, xlabel=xlabel, ylabel=ylabels[0], c=colors[0], **kwargs\n    )\n\n    # The new axes wipe out all formatting.\n    with ctx():\n        ax_right = ax.twinx()\n\n    # Hack to get the same color cycle (shared object).\n    # If this fail, gotta dig into the source code to find the new mechanism\n    try:\n        ax_right._get_lines = ax._get_lines\n    except AttributeError as e:\n        raise AttributeError(\n            \"Color cycle hack failed. Check matplotlib version.\"\n        ) from e\n\n    uni_plot(x, y_s[1], ax=ax_right, ylabel=ylabels[1], c=colors[1], **kwargs)\n\n    twin_color = ax_right.get_lines()[-1].get_color()\n\n    ax_right.spines[\"right\"].set_color(twin_color)\n    ax_right.yaxis.label.set_color(twin_color)\n    ax_right.tick_params(axis=\"y\", labelcolor=twin_color)\n    ax_right.grid(False)\n\n    return fig, ax\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.dual_x_axis_plot","title":"<code>dual_x_axis_plot(y, x_s, *, ax=None, xlabels=(None, None), ylabel=None, colors=(None, None), **kwargs)</code>","text":"<p>Plot 2 xs against 1 y</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Sequence[float]</code> <p>y-axis data</p> required <code>x_s</code> <code>tuple[Sequence[float], Sequence[float]]</code> <p>x-axis data</p> required <code>ax</code> <code>Axes | None</code> <p>Axes to plot on. New figure on None</p> <code>None</code> <code>xlabels</code> <code>tuple[str | None, str | None]</code> <p>Label for x-axis</p> <code>(None, None)</code> <code>ylabel</code> <code>str | None</code> <p>Labels for y-axis</p> <code>None</code> <code>colors</code> <code>tuple[ColorType | None, ColorType | None]</code> <p>Colour of the line.</p> <code>(None, None)</code> <p>Returns:</p> Type Description <code>tuple[Figure, Axes]</code> <p>Figure and Axes that was passed in or created</p> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Other keyword args for Axes.plot(). Moreover, If <code>xlab_override_warn</code>, <code>ylab_override_warn</code> are falsy, the module will not warn when <code>xlabel</code> or <code>ylabel</code> is overridden.</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def dual_x_axis_plot(\n    y: Sequence[float],\n    x_s: tuple[Sequence[float], Sequence[float]],\n    *,\n    ax: plt.Axes | None = None,\n    xlabels: tuple[str | None, str | None] = (None, None),\n    ylabel: str | None = None,\n    colors: tuple[ColorType | None, ColorType | None] = (None, None),\n    **kwargs,\n) -&gt; tuple[plt.Figure, plt.Axes]:\n    \"\"\"Plot 2 xs against 1 y\n\n    Args:\n        y: y-axis data\n        x_s: x-axis data\n        ax: Axes to plot on. New figure on None\n        xlabels: Label for x-axis\n        ylabel: Labels for y-axis\n        colors: Colour of the line.\n\n    Returns:\n        Figure and Axes that was passed in or created\n\n    Other Args:\n        **kwargs: Other keyword args for [Axes.plot()][matplotlib.axes.Axes.plot].\n            Moreover,\n            If `xlab_override_warn`, `ylab_override_warn` are falsy,\n            the module will not warn when `xlabel` or `ylabel` is overridden.\n    \"\"\"\n    fig, ax = uni_plot(\n        x_s[0], y, ax=ax, xlabel=xlabels[0], ylabel=ylabel, c=colors[0], **kwargs\n    )\n\n    # The new axes wipe out all formatting.\n    with ctx():\n        ax_top = ax.twiny()\n\n    # Hack to get the same color cycle (shared object).\n    # If this fail, gotta dig into the source code to find the new mechanism\n    try:\n        ax_top._get_lines = ax._get_lines\n    except AttributeError as e:\n        raise AttributeError(\n            \"Color cycle hack failed. Check matplotlib version.\"\n        ) from e\n\n    uni_plot(x_s[1], y, ax=ax_top, xlabel=xlabels[1], c=colors[1], **kwargs)\n\n    twin_color = ax_top.get_lines()[-1].get_color()\n\n    ax_top.spines[\"top\"].set_color(twin_color)\n    ax_top.xaxis.label.set_color(twin_color)\n    ax_top.tick_params(axis=\"x\", labelcolor=twin_color)\n    ax_top.grid(False)\n\n    return fig, ax\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.get_axes_siblings_twinx","title":"<code>get_axes_siblings_twinx(ax)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>Axes to get siblings from</p> required <p>Returns:</p> Type Description <code>list[Axes]</code> <p>Siblings (excluding itself) sharing the x axis</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def get_axes_siblings_twinx(ax: plt.Axes) -&gt; list[plt.Axes]:\n    \"\"\"\n    Args:\n        ax: Axes to get siblings from\n\n    Returns:\n        Siblings (excluding itself) sharing the x axis\n    \"\"\"\n    siblings = ax.get_shared_x_axes().get_siblings(ax)\n    siblings.remove(ax)\n    return siblings\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.get_axes_siblings_twiny","title":"<code>get_axes_siblings_twiny(ax)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>Axes to get siblings from</p> required <p>Returns:</p> Type Description <code>list[Axes]</code> <p>Siblings (excluding itself) sharing the y axis</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def get_axes_siblings_twiny(ax: plt.Axes) -&gt; list[plt.Axes]:\n    \"\"\"\n    Args:\n        ax: Axes to get siblings from\n\n    Returns:\n        Siblings (excluding itself) sharing the y axis\n    \"\"\"\n    siblings = ax.get_shared_y_axes().get_siblings(ax)\n    siblings.remove(ax)\n    return siblings\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.show","title":"<code>show()</code>","text":"<p>Show figures</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def show():\n    \"\"\"Show figures\"\"\"\n    plt.show()\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.save","title":"<code>save(fig, fname, **kwargs)</code>","text":"<p>Wrapper for Figure.savefig(). Defaults: dpi=200, transparent=True</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure</code> <p>Figure to save</p> required <code>fname</code> <code>str | PathLike | IO</code> <p>File name</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Figure.savefig().</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def save(fig: plt.Figure, fname: str | os.PathLike | IO, **kwargs):\n    \"\"\"Wrapper for [Figure.savefig()][matplotlib.figure.Figure.savefig].\n    Defaults: dpi=200, transparent=True\n\n    Args:\n        fig: Figure to save\n        fname: File name\n\n    Other Args:\n        **kwargs: [Figure.savefig()][matplotlib.figure.Figure.savefig].\n    \"\"\"\n    dpi = kwargs.pop(\"dpi\", 200)\n    transparent = kwargs.pop(\"transparent\", True)\n    fig.savefig(fname, bbox_inches=\"tight\", dpi=dpi, transparent=transparent, **kwargs)\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.get_fig_ax","title":"<code>get_fig_ax(ax)</code>","text":"<p>Get figure and axes. Create new figure if axes is None</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>@ctx()\ndef get_fig_ax(ax: plt.Axes | None) -&gt; tuple[plt.Figure, plt.Axes]:\n    \"\"\"Get figure and axes. Create new figure if axes is None\"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n    else:\n        fig = ax.figure  # axes must belong to 1 and only 1 figure\n\n    return fig, ax\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.subplots","title":"<code>subplots(*args, **kwargs)</code>","text":"<p>Wrapper for plt.subplots()</p> <p>Returns:</p> Type Description <code>tuple[Figure, Axes | list[Axes]]</code> <p>Figure and (Axes or array of Axes)</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>@ctx()\ndef subplots(*args, **kwargs) -&gt; tuple[plt.Figure, plt.Axes | list[plt.Axes]]:\n    \"\"\"Wrapper for [plt.subplots()][matplotlib.pyplot.subplots]\n\n    Returns:\n        Figure and (Axes or array of Axes)\n    \"\"\"\n    return plt.subplots(*args, **kwargs)\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.style_init","title":"<code>style_init()</code>","text":"<p>Initialise style. Permanent until style_reset()</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def style_init():\n    \"\"\"Initialise style. Permanent until [style_reset()][vis.style_reset]\"\"\"\n    for key, value in MPL_RC.items():\n        mpl.rc(key, **value)\n</code></pre>"},{"location":"python/plot.html#vis.visualisation.style_reset","title":"<code>style_reset()</code>","text":"<p>Reset style to default</p> Source code in <code>py/vis/visualisation.py</code> <pre><code>def style_reset():\n    \"\"\"Reset style to default\"\"\"\n    mpl.rcdefaults()\n</code></pre>"},{"location":"python/todo.html","title":"TODO","text":"<ul> <li>Multivariate plot</li> </ul>"},{"location":"python/usage.html","title":"Usage","text":"In\u00a0[1]: Copied! <pre>import vis\n</pre> import vis In\u00a0[2]: Copied! <pre>fig, (ax1, ax2) = vis.subplots(1, 2)\n\nvis.uni_plot([1, 2, 3], [4, 5, 6], xlabel=\"X\", ylabel=\"Y\", ax=ax1)\nvis.uni_plot([6, 7, 8], [9, 10, 11], ax=ax1)\nvis.uni_scatter([3, 3, 3], [4, 5, 7], label=\"Points\", ax=ax1)\nvis.uni_scatter([4, 4, 4], [4, 5, 7], label=\"Points\", ax=ax1)\n\nvis.uni_scatter([3, 3, 3], [4, 5, 7], label=\"Points\", ax=ax2)\n\nax1.set_title(\"Line Plot\")\nax2.set_title(\"Scatter Plot\")\n\nfig.suptitle(\"Sample Vis\")\n\nvis.show()\n</pre> fig, (ax1, ax2) = vis.subplots(1, 2)  vis.uni_plot([1, 2, 3], [4, 5, 6], xlabel=\"X\", ylabel=\"Y\", ax=ax1) vis.uni_plot([6, 7, 8], [9, 10, 11], ax=ax1) vis.uni_scatter([3, 3, 3], [4, 5, 7], label=\"Points\", ax=ax1) vis.uni_scatter([4, 4, 4], [4, 5, 7], label=\"Points\", ax=ax1)  vis.uni_scatter([3, 3, 3], [4, 5, 7], label=\"Points\", ax=ax2)  ax1.set_title(\"Line Plot\") ax2.set_title(\"Scatter Plot\")  fig.suptitle(\"Sample Vis\")  vis.show() <ul> <li>Warnings on overidding axis label</li> </ul> In\u00a0[3]: Copied! <pre>fig, ax = vis.uni_plot([1, 2, 3], [4, 5, 6], xlabel=\"X\", ylabel=\"Y\")\n\n# This will warn that the xlabel of \"X\" is discarded\nvis.uni_scatter([3, 4], [5,6], ax=ax, xlabel=\"new X\")\nvis.show()\n</pre> fig, ax = vis.uni_plot([1, 2, 3], [4, 5, 6], xlabel=\"X\", ylabel=\"Y\")  # This will warn that the xlabel of \"X\" is discarded vis.uni_scatter([3, 4], [5,6], ax=ax, xlabel=\"new X\") vis.show() <pre>\u26a0\ufe0f [Fig 1] xlabel arg discarded\n</pre> In\u00a0[4]: Copied! <pre>fig, ax = vis.uni_plot([1, 2, 3], [4, 5, 6], xlabel=\"X\", ylabel=\"Y\")\n\n# This will NOT warn that the xlabel of \"X\" is discarded. Same goes for ylabel\nvis.uni_scatter([3, 4], [5,6], ax=ax, xlabel=\"new X\", xlab_override_warn=False)\nvis.show()\n</pre> fig, ax = vis.uni_plot([1, 2, 3], [4, 5, 6], xlabel=\"X\", ylabel=\"Y\")  # This will NOT warn that the xlabel of \"X\" is discarded. Same goes for ylabel vis.uni_scatter([3, 4], [5,6], ax=ax, xlabel=\"new X\", xlab_override_warn=False) vis.show() In\u00a0[5]: Copied! <pre>fig, ax = vis.dual_x_axis_plot(\n    [1, 2, 3], ([4, 5, 6], [9, 9, 9]), xlabels=[\"X1\", \"X2\"], ylabel=\"Y\"\n)\nfig.legend([\"X1\", \"X2\"])\nvis.show()\n</pre> fig, ax = vis.dual_x_axis_plot(     [1, 2, 3], ([4, 5, 6], [9, 9, 9]), xlabels=[\"X1\", \"X2\"], ylabel=\"Y\" ) fig.legend([\"X1\", \"X2\"]) vis.show() In\u00a0[6]: Copied! <pre>vis.dual_y_axis_plot(\n    ([4, 5, 6], [9, 9, 9]), [1, 2, 3], xlabel=\"X\", ylabels=[\"Y1\", \"Y2\"]\n)\nvis.show()\n</pre> vis.dual_y_axis_plot(     ([4, 5, 6], [9, 9, 9]), [1, 2, 3], xlabel=\"X\", ylabels=[\"Y1\", \"Y2\"] ) vis.show()"},{"location":"python/usage.html#usage","title":"Usage\u00b6","text":""},{"location":"python/usage.html#prerequisites","title":"Prerequisites\u00b6","text":"<ul> <li>Understand how matplotlib <code>Figure</code> and <code>Axes</code> work. Quick start guide</li> </ul>"},{"location":"python/usage.html#whats-in-the-package","title":"What's in the package\u00b6","text":"<ul> <li>Colour: Python enum. Available</li> <li>ColourScheme: Python enum, tuple of Colour. Available</li> <li>Visualisation helpers/wrappers. API</li> </ul>"},{"location":"python/usage.html#example","title":"Example\u00b6","text":""},{"location":"python/usage.html#univariate-plot-and-scatter","title":"Univariate plot and scatter\u00b6","text":""},{"location":"python/usage.html#dual-axis","title":"Dual axis\u00b6","text":""},{"location":"python/usage.html#tips","title":"Tips\u00b6","text":"<ul> <li><p>Utilise the <code>fig</code> and <code>ax</code> return from the plotting functions.</p> </li> <li><p><code>get_axes_siblings_twin?()</code></p> <ul> <li><code>twinx</code> mean 2 or more <code>Axes</code> sharing an x-axis (<code>dual_y_axis_plot()</code> uses this)</li> <li>The <code>dual...()</code> only returns 1 <code>Axes</code>. The function will help get the other <code>Axes</code></li> </ul> </li> </ul>"},{"location":"python/usage.html#common-issues","title":"Common issues\u00b6","text":"<p><code>takes $x$ positional arguments but $&gt;x$ positional arguments</code></p> <ul> <li>Look at the function signature, anything after the <code>*</code> must be passed as <code>arg=value</code></li> </ul> <p>Why is the styling not applied even though I used <code>uni_plot()</code></p> <ul> <li>Check whether your <code>Axes</code>s and <code>Figure</code> are created with the right styling context. Use <code>vis.subplots()</code> instead of <code>plt.subplots()</code>, <code>ctx()</code> with <code>with</code> block or as decorator</li> </ul> <p>I want a permanent styling, apply directly onto <code>matplotlib</code></p> <ul> <li>Use <code>style_init()</code>. <code>style_reset()</code> will bring back default styling</li> </ul> <p>Why scatter same colour as line?</p> <ul> <li>This is a limitation of <code>matplotlib</code>. The package provides <code>Colour</code> and <code>ColourScheme</code> for further customisation, our suggestion is to explicitly pass the <code>c</code> arg into <code>uni_plot()</code>, etc.</li> <li>This snippet is a custom implementation to cycle the colours in scatter<pre>def _next_colour_scatter(\n      ax: plt.Axes | None, colour_scheme: tuple[str, ...], offset: int = 0\n  ) -&gt; str:\n      \"\"\"Get next colour from colour scheme with respect to amount of\n      collections in `ax` and the offset.\n      Offset is used when `ax.plot` has not been called but the `offset` colour is required\n      Args:\n          ax: Axes to plot on. If None, default to `colour_scheme[offset]`.\n          colour_scheme: Colour scheme to use\n          offset: Offset for `colour_scheme`\n      \"\"\"\n      return (\n          colour_scheme[(len(ax.collections) + offset) % len(colour_scheme)]\n          if ax\n          else colour_scheme[offset]\n      )\n</pre> </li> <li>This snippet is a custom implementation to cycle the colours in line<pre>def _next_colour_line_plot(\n      ax: plt.Axes | None, colour_scheme: tuple[str, ...], offset: int = 0\n  ) -&gt; str:\n      \"\"\"Get next colour from colour scheme with respect to amount of\n      lines in `ax` and the offset.\n      Offset is used when `ax.plot` has not been called but the `offset` colour is required.\n      Args:\n          ax: Axes to plot on. If None, default to `colour_scheme[offset]`.\n          colour_scheme: Colour scheme to use\n          offset: Offset for `colour_scheme`\n      \"\"\"\n      return (\n          colour_scheme[(len(ax.lines) + offset) % len(colour_scheme)]\n          if ax\n          else colour_scheme[offset]\n      )\n</pre> </li> </ul> <p>How to use enum</p> <ul> <li><code>Colour.AccentBlue</code> won't get you the string. Use <code>Colour.AccentBlue.value</code>. Same goes for <code>ColourScheme</code></li> </ul>"}]}